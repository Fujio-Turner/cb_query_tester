name: Build single-file executables

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ '3.11' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip and install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build single-file executable with PyInstaller (Unix)
        if: runner.os != 'Windows'
        run: |
          python -m PyInstaller --onefile --name cb_query_tester \
            --hidden-import numpy \
            --hidden-import couchbase.cluster \
            --hidden-import couchbase.options \
            --hidden-import couchbase.n1ql \
            --hidden-import couchbase.auth \
            --hidden-import couchbase.exceptions \
            --hidden-import dns.resolver \
            cb_query_tester.py

      - name: Build single-file executable with PyInstaller (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: >-
          python -m PyInstaller --onefile --name cb_query_tester
          --hidden-import numpy
          --hidden-import couchbase.cluster
          --hidden-import couchbase.options
          --hidden-import couchbase.n1ql
          --hidden-import couchbase.auth
          --hidden-import couchbase.exceptions
          --hidden-import dns.resolver
          cb_query_tester.py

      - name: Show dist contents (Unix)
        if: runner.os != 'Windows'
        run: |
          ls -al dist

      - name: Show dist contents (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Get-ChildItem -Force dist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cb_query_tester-${{ runner.os }}
          path: |
            dist/cb_query_tester*
          if-no-files-found: error

  release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: List downloaded files
        run: |
          find ./artifacts -maxdepth 2 -type f -print

      - name: Prepare versioned assets
        run: |
          set -euo pipefail
          TAG="${{ github.ref_name }}"
          mkdir -p release
          if [ -f "artifacts/cb_query_tester-Linux/cb_query_tester" ]; then
            cp artifacts/cb_query_tester-Linux/cb_query_tester "release/cb_query_tester-${TAG}-linux"
            chmod +x "release/cb_query_tester-${TAG}-linux"
          fi
          if [ -f "artifacts/cb_query_tester-macOS/cb_query_tester" ]; then
            cp artifacts/cb_query_tester-macOS/cb_query_tester "release/cb_query_tester-${TAG}-macos"
            chmod +x "release/cb_query_tester-${TAG}-macos"
          fi
          if [ -f "artifacts/cb_query_tester-Windows/cb_query_tester.exe" ]; then
            cp artifacts/cb_query_tester-Windows/cb_query_tester.exe "release/cb_query_tester-${TAG}-windows.exe"
          fi
          echo "Prepared assets:" && ls -al release

      - name: Create GitHub Release and upload binaries
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
